version: '3.5'
services:
  backend:
    hostname: news_backend
    container_name: news_backend
    build:
      context: ./news_backend
      dockerfile: ./Dockerfile
    command: sh -c "yarn start"
    env_file: .env
    environment:
      - MONGO_USERNAME=$MONGO_USERNAME
      - MONGO_PASSWORD=$MONGO_PASSWORD
      - MONGO_HOSTNAME=mongodb
      - MONGO_PORT=$MONGO_PORT
      - MONGO_DB=$MONGO_DB
    networks:
      - app-network
    ports:
      - "3030:3030"
    depends_on:
      mongodb:
        condition: service_healthy

  frontend:
    hostname: news_frontend
    container_name: news_frontend
    command: sh -c "yarn start"
    build:
      context: ./news_frontend
      dockerfile: ./Dockerfile
    networks:
      - frontend
    ports:
      - "3000:3000"
    environment:
      BACKEND_HTTP_API_ENDPOINT: http://news_backend:3030
    depends_on:
      mongodb:
        condition: service_healthy

  mongodb:
    container_name: mongo_db
    image: mongo
    restart: always
    env_file: .env
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongo admin -u $MONGO_USERNAME -p $MONGO_PASSWORD --quiet | grep 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
    environment:
      - MONGO_INITDB_ROOT_USERNAME=$MONGO_USERNAME
      - MONGO_INITDB_ROOT_PASSWORD=$MONGO_PASSWORD
      - MONGO_INITDB_DATABASE=$MONGO_DB
    networks:
      - app-network
    volumes:
      - ./news_backend/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - mongodb_data_container:/data/db

networks:
  app-network:
    driver: bridge

volumes:
  mongodb_data_container:
